// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ethermint/evm/v1/evm.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Marshal
	_ = fmt.Errorf
	_ = math.Inf
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// V5ExtraEIPs represents extra EIPs for the vm.Config
type V5ExtraEIPs struct {
	// eips defines the additional EIPs for the vm.Config
	EIPs []int64 `protobuf:"varint,1,rep,packed,name=eips,proto3" json:"eips,omitempty" yaml:"eips"`
}

func (m *V5ExtraEIPs) Reset()         { *m = V5ExtraEIPs{} }
func (m *V5ExtraEIPs) String() string { return proto.CompactTextString(m) }
func (*V5ExtraEIPs) ProtoMessage()    {}
func (*V5ExtraEIPs) Descriptor() ([]byte, []int) {
	return fileDescriptor_d21ecc92c8c8583e, []int{1}
}

func (m *V5ExtraEIPs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *V5ExtraEIPs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_V5ExtraEIPs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *V5ExtraEIPs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_V5ExtraEIPs.Merge(m, src)
}

func (m *V5ExtraEIPs) XXX_Size() int {
	return m.Size()
}

func (m *V5ExtraEIPs) XXX_DiscardUnknown() {
	xxx_messageInfo_V5ExtraEIPs.DiscardUnknown(m)
}

var xxx_messageInfo_V5ExtraEIPs proto.InternalMessageInfo

func (m *V5ExtraEIPs) GetEIPs() []int64 {
	if m != nil {
		return m.EIPs
	}
	return nil
}

func init() {
	proto.RegisterType((*V5ExtraEIPs)(nil), "ethermint.evm.v1.V5ExtraEIPs")
}

func init() { proto.RegisterFile("ethermint/evm/v1/evm.proto", fileDescriptor_d21ecc92c8c8583e) }

var fileDescriptor_d21ecc92c8c8583e = []byte{
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x84, 0x96, 0xcf, 0x73, 0xd3, 0x46,
	0x14, 0xc7, 0x15, 0x5b, 0x8e, 0xe5, 0x67, 0x27, 0x11, 0x4a, 0xa0, 0x19, 0x97, 0x42, 0x70, 0x87,
	0x21, 0x0c, 0x25, 0x26, 0x10, 0x3a, 0x29, 0x3d, 0x14, 0xc2, 0x8f, 0x16, 0x97, 0x32, 0x8c, 0x09,
	0x17, 0x2e, 0x9a, 0xb5, 0xb4, 0xc8, 0x6a, 0x24, 0xad, 0x67, 0x77, 0x65, 0xec, 0xfe, 0x09, 0xfd,
	0x33, 0x7a, 0xec, 0xad, 0xd7, 0x1e, 0x7b, 0xe9, 0x4c, 0xff, 0x8c, 0x1e, 0xfb, 0x17, 0x74, 0x7a,
	0xea, 0xec, 0x0f, 0xad, 0xd7, 0x31, 0x33, 0x9c, 0xc0, 0xef, 0xfb, 0x79, 0xdf, 0xbc, 0x7d, 0xbb,
	0x7a, 0xbb, 0xd0, 0xc5, 0x7c, 0x8c, 0x69, 0x9e, 0x16, 0xbc, 0x8f, 0xa7, 0x79, 0x7f, 0x7a, 0x28,
	0xfe, 0x39, 0x98, 0x50, 0xc2, 0x49, 0xe0, 0x1b, 0xed, 0x40, 0x04, 0xa7, 0x87, 0xdd, 0x9d, 0x84,
	0x24, 0x44, 0x8a, 0x7d, 0xf1, 0x3f, 0xc5, 0xf5, 0xfe, 0xac, 0xc1, 0xfa, 0x2b, 0x44, 0x51, 0xce,
	0x82, 0xcf, 0xa1, 0x85, 0xa7, 0x79, 0x18, 0xe3, 0x82, 0xe4, 0x81, 0xb3, 0xbb, 0xb6, 0xb7, 0xb6,
	0xdf, 0xba, 0xeb, 0x3c, 0x70, 0x4e, 0x9c, 0xa1, 0x87, 0xa7, 0xf9, 0x13, 0x19, 0xbf, 0x05, 0x1b,
	0xb8, 0x40, 0xa3, 0x0c, 0x87, 0x11, 0xc5, 0x88, 0xe3, 0xc0, 0xd9, 0xad, 0xed, 0xad, 0xed, 0x7b,
	0x1a, 0xec, 0x28, 0xf1, 0xb1, 0xd2, 0x6e, 0x40, 0xbb, 0x82, 0x51, 0x96, 0x05, 0xce, 0x6e, 0xdd,
	0x42, 0x41, 0xa3, 0x42, 0x79, 0x08, 0x80, 0x67, 0x9c, 0xa2, 0x10, 0xa7, 0x13, 0x16, 0x38, 0xbb,
	0xee, 0xde, 0xda, 0x7e, 0xfb, 0xee, 0xa7, 0x07, 0xe7, 0x17, 0x71, 0xf0, 0x54, 0x50, 0x4f, 0x9f,
	0xbf, 0x62, 0xd2, 0xa2, 0x25, 0x93, 0x9e, 0x8a, 0x9c, 0x67, 0xd0, 0x89, 0xc6, 0x28, 0x2d, 0xc2,
	0x88, 0x14, 0xef, 0xd2, 0x24, 0x70, 0x76, 0x1b, 0xd2, 0xe3, 0xb3, 0x55, 0x8f, 0xc7, 0x82, 0x7b,
	0x2c, 0x31, 0xe9, 0xd2, 0x8e, 0x16, 0x81, 0xe0, 0x18, 0x2e, 0xa2, 0x2c, 0x23, 0xef, 0xc3, 0xb2,
	0x10, 0x0d, 0xc2, 0x11, 0xc7, 0x71, 0xc8, 0x67, 0xa2, 0xa8, 0xf5, 0xaa, 0xf8, 0xe1, 0xb6, 0x44,
	0xde, 0x2c, 0x88, 0xd3, 0x19, 0xeb, 0xdd, 0x80, 0x96, 0xa9, 0x2e, 0xe8, 0x82, 0xab, 0x97, 0xb2,
	0xb6, 0x57, 0xdf, 0xaf, 0xeb, 0x25, 0xcb, 0x58, 0xef, 0xbf, 0x26, 0xb4, 0xad, 0x1a, 0x82, 0x3e,
	0x6c, 0x8d, 0x49, 0x8e, 0x19, 0xc7, 0x28, 0x0e, 0x47, 0x19, 0x89, 0xce, 0xce, 0x75, 0x7f, 0xd3,
	0xc8, 0x27, 0x52, 0xfd, 0x02, 0x36, 0x63, 0x44, 0xc2, 0x77, 0x84, 0x9e, 0x19, 0xbe, 0x66, 0xf1,
	0x9d, 0x18, 0x91, 0x67, 0x84, 0x9e, 0x29, 0xfa, 0x0e, 0xf8, 0x86, 0x66, 0xe5, 0x64, 0x42, 0x28,
	0x3f, 0xb7, 0x13, 0x9b, 0x9a, 0x7f, 0xad, 0xd5, 0x9b, 0xd0, 0xc1, 0xe9, 0xe4, 0xf0, 0xfe, 0x1d,
	0xe3, 0xee, 0x5a, 0xee, 0x6d, 0xa5, 0x29, 0x73, 0xb1, 0xc3, 0x0a, 0x1d, 0x23, 0x36, 0xd6, 0x5d,
	0x6f, 0x99, 0x1d, 0x96, 0xd2, 0x77, 0x42, 0xa9, 0x3c, 0xef, 0x1b, 0xcf, 0xf5, 0x15, 0xcf, 0xfb,
	0xca, 0xb3, 0x42, 0x8f, 0x0d, 0xda, 0x5c, 0x41, 0x8f, 0x15, 0xda, 0x87, 0xad, 0xd1, 0xfc, 0x27,
	0x54, 0xf0, 0xb4, 0xcc, 0x0d, 0xed, 0xd9, 0xad, 0x33, 0xb2, 0x4a, 0xf8, 0x0a, 0x76, 0x22, 0x52,
	0x30, 0x2e, 0x62, 0x05, 0x99, 0x64, 0xd8, 0x64, 0xb5, 0xac, 0xac, 0xed, 0x65, 0x46, 0xa5, 0x1e,
	0x82, 0x3f, 0xc1, 0x1c, 0x53, 0x36, 0x2a, 0x69, 0x62, 0xd2, 0xc0, 0x4a, 0xdb, 0x5a, 0xe8, 0x2a,
	0xe5, 0x36, 0x6c, 0xa6, 0xc2, 0x67, 0x54, 0x66, 0x26, 0xa1, 0x6d, 0x25, 0x6c, 0x54, 0xaa, 0xc2,
	0x8f, 0x20, 0xc8, 0xcb, 0x94, 0x86, 0x49, 0x86, 0xa2, 0x14, 0x53, 0x93, 0xd2, 0xb1, 0x52, 0x7c,
	0x41, 0x7c, 0xab, 0x00, 0xd3, 0xae, 0x11, 0xa6, 0x59, 0x5a, 0x18, 0x7e, 0xc3, 0x6e, 0x97, 0xd2,
	0x0c, 0x9a, 0x91, 0x22, 0x26, 0x0b, 0xf4, 0x82, 0x8d, 0x2a, 0x4d, 0xa1, 0x5f, 0xc2, 0x36, 0xa2,
	0x94, 0xbc, 0x5f, 0x29, 0x26, 0xb0, 0x32, 0x2e, 0x48, 0x64, 0xa9, 0x9a, 0x23, 0x08, 0x12, 0x8a,
	0xe6, 0x2b, 0x69, 0x3b, 0xf6, 0x1a, 0x04, 0xb1, 0x94, 0x75, 0x0c, 0x3b, 0x39, 0xa6, 0x09, 0x0e,
	0x0b, 0xcc, 0xd9, 0x24, 0x4b, 0xb9, 0xc9, 0xbb, 0x68, 0xe5, 0x05, 0x92, 0x79, 0xa9, 0x11, 0xd3,
	0x62, 0x36, 0x46, 0x45, 0x32, 0x46, 0xa9, 0xc9, 0xb9, 0x64, 0xb7, 0xb8, 0x52, 0x4d, 0x07, 0x22,
	0x54, 0x44, 0xe5, 0xa2, 0x03, 0x9f, 0xd8, 0x1d, 0x50, 0x9a, 0x44, 0x07, 0xae, 0xb7, 0xe9, 0x6f,
	0x0d, 0x5c, 0x6f, 0xcb, 0xf7, 0x07, 0xae, 0xe7, 0xfb, 0x17, 0x06, 0xae, 0xb7, 0xed, 0xef, 0x0c,
	0x37, 0xe6, 0x24, 0x23, 0xe1, 0xf4, 0x9e, 0x72, 0x18, 0xb6, 0xf1, 0x7b, 0xc4, 0xf4, 0xe1, 0x1b,
	0x6e, 0x46, 0x88, 0xa3, 0x6c, 0xce, 0x74, 0xfd, 0x43, 0x5f, 0xad, 0x6a, 0xf1, 0xa5, 0xf6, 0xbe,
	0x86, 0xc6, 0x6b, 0x2e, 0x66, 0xe3, 0x25, 0xa8, 0x9f, 0xe1, 0xb9, 0xfd, 0xa5, 0x0f, 0x65, 0xa0,
	0x0b, 0x8d, 0x29, 0xca, 0x4a, 0x6c, 0x7f, 0xd3, 0x43, 0x15, 0xea, 0xbd, 0x85, 0xad, 0x53, 0x8a,
	0x0a, 0x86, 0x22, 0x9e, 0x92, 0xe2, 0x05, 0x49, 0x58, 0xb0, 0x0b, 0xae, 0xfe, 0xf2, 0x16, 0x3e,
	0x2a, 0x72, 0x1b, 0xdc, 0x4c, 0x10, 0xc2, 0xa7, 0xbe, 0xdf, 0xbe, 0x7b, 0x71, 0x75, 0x12, 0xbe,
	0x20, 0x89, 0xc0, 0x05, 0xd6, 0xfb, 0xad, 0x06, 0xf5, 0x17, 0x24, 0x09, 0xae, 0x40, 0x13, 0xc5,
	0x31, 0xc5, 0x8c, 0x2d, 0x79, 0x9a, 0xe0, 0x65, 0x58, 0xe7, 0x64, 0x92, 0x46, 0x95, 0xb1, 0x92,
	0xab, 0xd8, 0x2e, 0xb8, 0x31, 0xe2, 0x48, 0x0f, 0x98, 0x8e, 0x2a, 0x47, 0x46, 0xc4, 0x31, 0x15,
	0x1d, 0x08, 0x8b, 0x32, 0x1f, 0x61, 0xaa, 0x87, 0x8a, 0x6b, 0x8e, 0xa9, 0xd0, 0x5e, 0x2a, 0xe9,
	0x2a, 0x34, 0xf9, 0xec, 0x43, 0x03, 0x65, 0x9d, 0xcf, 0xe4, 0x30, 0xb9, 0x06, 0x1e, 0x9f, 0x85,
	0x69, 0x11, 0xe3, 0x99, 0x1e, 0x24, 0x95, 0x4f, 0x93, 0xcf, 0x9e, 0xcb, 0xf0, 0x75, 0x00, 0xf5,
	0xe7, 0xb4, 0x8d, 0x3d, 0x42, 0x5a, 0x52, 0x91, 0x4e, 0x97, 0xa1, 0x51, 0xd9, 0x78, 0x96, 0x8d,
	0x0e, 0x5e, 0x81, 0x26, 0xc5, 0x39, 0x99, 0xe2, 0x58, 0x0f, 0x08, 0x35, 0xfe, 0xab, 0x60, 0xef,
	0xdf, 0x35, 0xf0, 0x4e, 0x67, 0x43, 0xcc, 0xca, 0x8c, 0x8b, 0xf9, 0x10, 0x91, 0x82, 0x53, 0x14,
	0xf1, 0xf0, 0x03, 0x1d, 0x14, 0xf3, 0xa1, 0xd2, 0x1f, 0x69, 0xb9, 0x0b, 0x8d, 0x51, 0x46, 0xe4,
	0x6d, 0x5b, 0x33, 0xed, 0xd2, 0xa1, 0x87, 0xb2, 0x09, 0x7a, 0x07, 0xeb, 0xf2, 0x2e, 0xbb, 0xb6,
	0xba, 0x83, 0xe7, 0x8e, 0x43, 0xd5, 0x25, 0x79, 0x34, 0x2e, 0x41, 0x9d, 0x62, 0xae, 0x1b, 0xad,
	0xbc, 0x65, 0x60, 0x0f, 0x3c, 0x8a, 0xa7, 0x98, 0x72, 0xb9, 0xac, 0x86, 0x59, 0xd6, 0x22, 0x7a,
	0x15, 0xbc, 0x04, 0xb1, 0xb0, 0x64, 0x92, 0x30, 0xfd, 0x1d, 0x36, 0x13, 0xc4, 0xde, 0x30, 0x1c,
	0x3f, 0x70, 0x7a, 0x6f, 0xa1, 0xfd, 0x28, 0x8a, 0x30, 0x63, 0xa7, 0xe5, 0x24, 0xc3, 0x1f, 0x3d,
	0x35, 0x37, 0xa1, 0xc3, 0x38, 0xa1, 0x28, 0xc1, 0xe1, 0x19, 0x9e, 0x2f, 0x9d, 0x1d, 0xb1, 0xfb,
	0x5a, 0xfb, 0x1e, 0xcf, 0xd9, 0x03, 0xa7, 0xf7, 0xb3, 0x0b, 0xed, 0x53, 0x8a, 0x22, 0xac, 0x2f,
	0x48, 0x71, 0xe4, 0xc4, 0x4f, 0xba, 0xe4, 0x5d, 0xc5, 0xae, 0x40, 0x93, 0xa7, 0x39, 0x26, 0x25,
	0x5f, 0xfa, 0x64, 0x4c, 0xf0, 0x32, 0xac, 0x53, 0x8c, 0x67, 0x38, 0xd2, 0x7d, 0x54, 0x4b, 0xa9,
	0x62, 0xb7, 0x60, 0x23, 0x4e, 0x99, 0x7c, 0xa3, 0x30, 0x8e, 0xe4, 0x44, 0x68, 0xd8, 0xef, 0x19,
	0x2d, 0xbe, 0x96, 0x5a, 0x1f, 0xb6, 0x16, 0xb0, 0xac, 0xd8, 0x7e, 0x16, 0xc8, 0x9b, 0xb4, 0xc2,
	0x95, 0xda, 0x85, 0x46, 0x8c, 0x47, 0x65, 0xa2, 0x8f, 0x97, 0xea, 0xb3, 0x0e, 0x75, 0xa1, 0x91,
	0xa5, 0x79, 0xca, 0xf5, 0xd1, 0x6a, 0x28, 0x4d, 0x85, 0xbe, 0x81, 0x16, 0x99, 0x62, 0x4a, 0xd3,
	0x18, 0x33, 0x7d, 0xc9, 0x7c, 0xfc, 0x29, 0x33, 0xb4, 0x72, 0x16, 0xcf, 0xb4, 0x1c, 0xe7, 0x84,
	0xce, 0xf5, 0xc5, 0x73, 0xee, 0x99, 0xf6, 0x83, 0xd2, 0x8e, 0x20, 0xd0, 0x30, 0xc5, 0xbc, 0xa4,
	0x45, 0xa8, 0x3f, 0xe1, 0x8e, 0x95, 0xe1, 0x2b, 0x62, 0x28, 0x81, 0x27, 0x42, 0x3f, 0x82, 0x40,
	0xed, 0x40, 0xf8, 0x23, 0x23, 0xd6, 0xbb, 0xcb, 0xbe, 0x7d, 0x7c, 0x45, 0x0c, 0x18, 0xd1, 0x55,
	0x0e, 0x5c, 0xcf, 0xf5, 0x1b, 0x03, 0xd7, 0x6b, 0xfa, 0x9e, 0xe9, 0x96, 0xae, 0x71, 0xb8, 0x5d,
	0xfd, 0xb6, 0xca, 0x38, 0x79, 0x08, 0xce, 0x89, 0xf3, 0xf6, 0x7a, 0x92, 0xf2, 0x71, 0x39, 0x3a,
	0x88, 0x48, 0xde, 0xe7, 0x68, 0x94, 0xf6, 0x17, 0x4f, 0xdf, 0x99, 0x7c, 0xfc, 0xf2, 0xf9, 0x04,
	0xb3, 0x5f, 0x6a, 0xce, 0xaf, 0x35, 0xe7, 0xf7, 0x9a, 0xf3, 0x47, 0xcd, 0xf9, 0xab, 0xe6, 0xfc,
	0x5d, 0x73, 0xfe, 0xa9, 0x39, 0xa3, 0x75, 0xf9, 0xd2, 0xbd, 0xf7, 0x7f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x38, 0xdf, 0x8c, 0xfa, 0x2f, 0x0b, 0x00, 0x00,
}

func (m *V5ExtraEIPs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *V5ExtraEIPs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *V5ExtraEIPs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EIPs) > 0 {
		dAtA4 := make([]byte, len(m.EIPs)*10)
		var j3 int
		for _, num1 := range m.EIPs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintEvm(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvm(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvm(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

func (m *V5ExtraEIPs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EIPs) > 0 {
		l = 0
		for _, e := range m.EIPs {
			l += sovEvm(uint64(e))
		}
		n += 1 + sovEvm(uint64(l)) + l
	}
	return n
}

func sovEvm(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}

func sozEvm(x uint64) (n int) {
	return sovEvm(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}

func (m *V5ExtraEIPs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: V5ExtraEIPs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: V5ExtraEIPs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvm
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EIPs = append(m.EIPs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvm
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEvm
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthEvm
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.EIPs) == 0 {
					m.EIPs = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvm
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EIPs = append(m.EIPs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EIPs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func skipEvm(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvm
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvm
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvm
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvm
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvm        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvm          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvm = fmt.Errorf("proto: unexpected end of group")
)
